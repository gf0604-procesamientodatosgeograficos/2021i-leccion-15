{
  "articles": [
    {
      "path": "01-r-ecosistemaespacial.html",
      "title": "El ecosistema espacial de R",
      "author": [],
      "contents": "\r\n\r\nContents\r\nPreparativos\r\nCarga de paquetes\r\nConjuntos de datos utilizados\r\n\r\nIntroducción\r\nDatos vectoriales\r\nEl modelo vectorial\r\nEl estándar Simple Features\r\nEl paquete sf\r\nFunciones\r\n\r\n\r\n\r\nPreparativos\r\nCarga de paquetes\r\n\r\n\r\nlibrary(sf)\r\nlibrary(rgdal)\r\nlibrary(raster)\r\nlibrary(ggplot2)\r\nlibrary(dplyr)\r\n\r\n\r\n\r\nConjuntos de datos utilizados\r\nCasos de COVID-19 en Costa Rica\r\n\r\n# Carga de datos desde un archivo CSV\r\ncovid <-\r\n  read.csv(file = 'https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2021i-datos/main/ministerio-salud/covid/ultimafecha_CSV_GENERAL.csv')\r\n\r\n\r\n\r\nIntroducción\r\nLa comunidad de programadores de R ha desarrollado un conjunto de paquetes para el manejo de datos geoespaciales, tanto en formatos vectoriales como raster. Algunos de los principales de estos paquetes son:\r\nEl paquete sf de R. Ofrece un conjunto de funciones para el manejo de datos vectoriales, de acuerdo con el estándar Simple Features.\r\nEl paquete raster de R. Implementa un conjunto de funciones para el manejo de datos raster.\r\nEl paquete Leaflet para R. Es una implementación en R de la biblioteca Leaflet para el lenguaje JavaScript para la programación de mapas interactivos en páginas web.\r\nAlgunos paquetes de graficación, como ggplot2, también cuentan con algunas capacidades para procesamiento de datos geoespaciales.\r\nDatos vectoriales\r\nEl modelo vectorial\r\nEl modelo vectorial de datos está basado en puntos localizados en un sistema de referencia de coordenadas (CRS). Los puntos individuales pueden representar objetos independientes (ej. la localización de un poste eléctrico o de una cabina telefónica) o pueden también agruparse para formar geometrías más complejas como líneas o polígonos. Por lo general, los puntos tienen solo dos dimensiones (x, y), a las que se les puede agregar una tercera dimensión z, usualmente correspondiente a la altitud sobre el nivel del mar.\r\nEl estándar Simple Features\r\nSimple Features (o Simple Feature Access) es un estándar abierto de la Organización Internacional de Estandarización (ISO) y del Open Geospatial Consortium (OGC) que especifica un modelo común de almacenamiento y acceso para geometrías de dos dimensiones (líneas, polígonos, multilíneas, multipolígonos, etc.). El estándar es implementado por muchas bibliotecas y bases de datos geoespaciales como sf, GDAL, PostgreSQL/PostGIS, SQLite/SpatiaLite, Oracle Spatial y Microsoft SQL Server, entre muchas otras.\r\nLa especificación define 17 tipos de geometrías, de las cuales siete son las más comúnmente utilizadas. Estas últimas se muestran en la figura 1.\r\nFigura 1. Tipos de geometrías de Simple Features más usadas. Imagen de Robin Lovelace et al. (https://geocompr.robinlovelace.net/spatial-class.html#vector-data)El paquete sf\r\nEl paquete sf (de Simple Features) de R implementa los modelos de datos de las geometrías de tipo vectorial: puntos, líneas, polígonos, sus versiones múltiples y las colecciones de geometrías. Está basado en bibliotecas de sofware ampliamente utilizadas en aplicaciones geoespaciales:\r\nGDAL: Geospatial Data Abstraction Library (GDAL) es una biblioteca para leer y escribir datos geoespaciales en varios formatos raster y vectoriales. Implementa un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato que se utilice (GeoTIFF, NetCDF, ESRI Shapefile, GeoJSON, etc.). A pesar de que GDAL está programada en C/C++, cuenta con una interfaz de programación de aplicaciones (API) para varios lenguajes de programación, incluyendo C, C++, Python y Java. Además, ofrece un conjunto de utilitarios de línea de comandos cuyas distribuciones binarias están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux.\r\nGEOS: Geometry Engine, Open Source (GEOS) es una implmentación en C++ de la biblioteca JTS Topology Suite (desarrollada en Java) y que implementa un conjunto de operaciones y predicados geoespaciales (ej. unión, intersección, distancia, área).\r\nPROJ: PROJ es una biblioteca que transforma coordenadas entre diferentes CRS, incluyendo tanto proyecciones cartográficas como transformaciones geodésicas.\r\nsf provee acceso, desde un mismo paquete de R, a la funcionalidad de estas tres bibliotecas, proporcionando así una interfaz unificada para leer y escribir datos geoespaciales mediante GDAL, realizar operaciones con geometrías mediante GEOS y efectuar transformaciones entre sistemas de coordenadas mediante PROJ.\r\nEn sf, los conjuntos de datos geoespaciales se almacenan en un data frame que contiene una columna especial para las geometrías. Esta columna se denomina generalmente geom o geometry. El manejo de datos geoespaciales como data frames, permite manipularlos con las funciones ya desarrolladas para data frames y con la misma forma de referenciar las filas (observaciones) y las columnas (variables).\r\nFunciones\r\nLa función st_read() permite leer una fuenta de datos vectoriales (ej. archivo, base de datos) y recuperarlos en un objeto sf. Este tipo de objetos extiende los data frames con una columna de geometrías.\r\n\r\n\r\n# Lectura de una capa vectorial mediante st_read()\r\nprovincias <-\r\n  st_read(\r\n    \"https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2021i-datos/main/ign/delimitacion-territorial-administrativa/cr_provincias_simp_wgs84.geojson\",\r\n    quiet = TRUE\r\n  )\r\n\r\n\r\n\r\nLa función plot() muestra un objeto sf en un mapa.\r\n\r\n\r\n# Mapeo de un objeto sf mediante plot()\r\nplot(\r\n  provincias[\"geometry\"]\r\n)\r\n\r\n\r\n\r\n# Mapeo de un objeto sf con argumentos adicionales de plot()\r\nplot(\r\n  provincias[\"geometry\"],\r\n  extent = st_bbox(c(\r\n    xmin = -86,\r\n    xmax = -82,\r\n    ymax = 11,\r\n    ymin = 8\r\n  )),\r\n  axes = TRUE,\r\n  graticule = TRUE\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-30T20:59:51-06:00"
    },
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-30T16:57:04-06:00"
    },
    {
      "path": "index.html",
      "title": "GF0604 Procesamiento de datos geográficos 2021-I. Lecciones 15 - 30",
      "description": "Curso GF0604 Procesamiento de datos geográficos. Escuela de Geografía, Universidad de Costa Rica. Primer ciclo lectivo 2021. Lecciones 15 - 30.\n",
      "author": [
        {
          "name": "Manuel Vargas",
          "url": "https://github.com/mfvargas"
        }
      ],
      "contents": "\r\n\r\nContents\r\nResumen\r\nRecursos bibliográficos\r\nContenidos\r\n\r\nResumen\r\nEn estas lecciones, se cubren las capacidades geoespaciales del lenguaje de programación R.\r\nRecursos bibliográficos\r\nLovelace, R., Nowosad, J., & Muenchow, J. (2019). Geocomputation with R.\r\nContenidos\r\n01 El ecosistema espacial de R\r\n\r\n\r\n\r\n",
      "last_modified": "2021-05-30T17:20:53-06:00"
    }
  ],
  "collections": []
}
